require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe OutreachEventsController do
  before(:each) do
    login_as("superuser")
  end
  def mock_outreach_event(stubs={})
    @mock_outreach_event ||= mock_model(OutreachEvent, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all outreach_events as @outreach_events" do
      OutreachEvent.stub(:all) { [mock_outreach_event] }
      get :index
      assigns(:outreach_events).should eq([mock_outreach_event])
    end
  end

  describe "GET new" do
    it "assigns a new outreach_event as @outreach_event" do
      OutreachEvent.stub(:new) { mock_outreach_event }
      get :new
      assigns(:outreach_event).should be(mock_outreach_event)
    end
  end

  describe "GET edit" do
    it "assigns the requested outreach_event as @outreach_event" do
      OutreachEvent.stub(:find).with("37") { mock_outreach_event }
      get :edit, :id => "37"
      assigns(:outreach_event).should be(mock_outreach_event)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created outreach_event as @outreach_event" do
        OutreachEvent.stub(:new).with({'these' => 'params'}) { mock_outreach_event(:save => true) }
        post :create, :outreach_event => {'these' => 'params'}
        assigns(:outreach_event).should be(mock_outreach_event)
      end

      it "redirects to the created outreach index" do
        OutreachEvent.stub(:new) { mock_outreach_event(:save => true) }
        post :create, :outreach_event => {}
        response.should redirect_to(outreach_events_url)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved outreach_event as @outreach_event" do
        OutreachEvent.stub(:new).with({'these' => 'params'}) { mock_outreach_event(:save => false) }
        post :create, :outreach_event => {'these' => 'params'}
        assigns(:outreach_event).should be(mock_outreach_event)
      end

      it "re-renders the 'new' template" do
        OutreachEvent.stub(:new) { mock_outreach_event(:save => false) }
        post :create, :outreach_event => {}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested outreach_event" do
        OutreachEvent.stub(:find).with("37") { mock_outreach_event }
        mock_outreach_event.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => "37", :outreach_event => {'these' => 'params'}
      end

      it "assigns the requested outreach_event as @outreach_event" do
        OutreachEvent.stub(:find) { mock_outreach_event(:update_attributes => true) }
        put :update, :id => "1"
        assigns(:outreach_event).should be(mock_outreach_event)
      end

      it "redirects to the outreach index" do
        OutreachEvent.stub(:find) { mock_outreach_event(:update_attributes => true) }
        put :update, :id => "1"
        response.should redirect_to(outreach_events_url)
      end
    end

    describe "with invalid params" do
      it "assigns the outreach_event as @outreach_event" do
        OutreachEvent.stub(:find) { mock_outreach_event(:update_attributes => false) }
        put :update, :id => "1"
        assigns(:outreach_event).should be(mock_outreach_event)
      end

      it "re-renders the 'edit' template" do
        OutreachEvent.stub(:find) { mock_outreach_event(:update_attributes => false) }
        put :update, :id => "1"
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested outreach_event" do
      OutreachEvent.stub(:find).with("37") { mock_outreach_event }
      mock_outreach_event.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the outreach_events list" do
      OutreachEvent.stub(:find) { mock_outreach_event }
      delete :destroy, :id => "1"
      response.should redirect_to(outreach_events_url)
    end
  end

end
